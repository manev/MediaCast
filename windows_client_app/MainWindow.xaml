<controls:MetroWindow x:Class="ClientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ClientApp"
        xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
        mc:Ignorable="d"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="Regular"
        TextElement.FontSize="13"
        TextOptions.TextFormattingMode="Ideal" 
        TextOptions.TextRenderingMode="Auto"        
        WindowStartupLocation="CenterScreen"
        BorderThickness="1"
        GlowBrush="{DynamicResource MahApps.Brushes.Accent}"
        Background="{DynamicResource MaterialDesignPaper}"
        BorderBrush="{DynamicResource MahApps.Brushes.Accent}"
        FontFamily="{DynamicResource MaterialDesignFont}">

    <controls:MetroWindow.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVis" />

        <Style x:Key="toolbarButton" TargetType="Button" BasedOn="{StaticResource MaterialDesignToolButton}">
            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        </Style>
    </controls:MetroWindow.Resources>

    <controls:MetroWindow.LeftWindowCommands>
        <controls:WindowCommands x:Name="toolbar">

            <!--<Button x:Name="closeBtn" 
                        Click="OnClose"
                        Grid.Column="4"
                        HorizontalAlignment="Right" 
                        Content="{materialDesign:PackIcon Kind=CloseThick, Size=20}"></Button>-->

            <Button Content="{materialDesign:PackIcon Kind=ArrowLeft, Size=20}"
                    Click="BackClickHandler"></Button>

            <Button Content="Add Library" 
                    Click="AddLibClickHandler" Margin="1 0"></Button>

            <Button Content="Delete Library"
                    Click="DeleteCurrentLib" Margin="1 0"></Button>

        </controls:WindowCommands>
    </controls:MetroWindow.LeftWindowCommands>

    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="10 0 10 0" x:Name="chromeCastList">
                <Button Content="Connect" Click="ConnectChromeCast"></Button>
                <ComboBox Margin="10 0 0 0" Width="300" HorizontalAlignment="Center"  Visibility="Collapsed">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding FriendlyName}"></TextBlock>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </StackPanel>
        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>

    <controls:HamburgerMenu x:Name="mediaList" 
                            HamburgerWidth="48"
                            DisplayMode="CompactInline"
                            IsPaneOpen="true"
                            CanResizeOpenPane="True"
                            HamburgerButtonClick="OnHamburgerButtonClick"
                            MouseDoubleClick="OnMediaSelected">
        
        <!--<controls:HamburgerMenu.ContextMenu>
            <ContextMenu>
                <MenuItem Header="Delete" Click="OnDelete" />
                <MenuItem Header="Hard Delete" Click="OnHardDelete" />
            </ContextMenu>
        </controls:HamburgerMenu.ContextMenu>-->
        
        <controls:HamburgerMenu.Resources>
            <Style TargetType="ScrollBar" BasedOn="{StaticResource MaterialDesignScrollBarMinimal}"/>
        </controls:HamburgerMenu.Resources>
        <controls:HamburgerMenu.ItemTemplate>
            <DataTemplate>
                <DockPanel Margin="10 5">
                    <DockPanel.Style>
                        <Style TargetType="DockPanel">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type controls:HamburgerMenu}}, Path=IsPaneOpen, Mode=OneWay}" Value="false">
                                    <Setter Property="Visibility" Value="Collapsed"></Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DockPanel.Style>
                    <materialDesign:PackIcon DockPanel.Dock="Left">
                        <materialDesign:PackIcon.Style>
                            <Style TargetType="materialDesign:PackIcon">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsFile}" Value="true">
                                        <Setter Property="Kind" Value="Video" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsFile}" Value="false">
                                        <Setter Property="Kind" Value="Folder" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </materialDesign:PackIcon.Style>
                    </materialDesign:PackIcon>
                    <TextBlock Text="{Binding Name}" Margin="2 0 0 0"></TextBlock>
                </DockPanel>
            </DataTemplate>
        </controls:HamburgerMenu.ItemTemplate>

        <controls:HamburgerMenu.Content>
            <local:MediaPlayerHost x:Name="mediaElement"
                               ToggledFullScreen="OnToggleFullScreenHandler"
                               VideoEnded="OnVideoEnded"></local:MediaPlayerHost>
        </controls:HamburgerMenu.Content>

    </controls:HamburgerMenu>

</controls:MetroWindow>
